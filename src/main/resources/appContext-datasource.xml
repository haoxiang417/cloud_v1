<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>3</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15  -->
		<property name="maxPoolSize">
			<value>${jdbc.maxpoolsize}</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3  -->
		<property name="initialPoolSize">
			<value>3</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0  -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3  -->
		<property name="acquireIncrement">
			<value>3</value>
		</property>
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0  -->
		<property name="idleConnectionTestPeriod">
			<value>40</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30  -->
		<property name="acquireRetryAttempts">
			<value>200</value>
		</property>
		<property name="acquireRetryDelay">
			<value>2000</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
		<property name="properties" ref="dataSourceProperties"/>
	</bean>
	
	<bean id="dataSourceProperties" class="com.lec.framework.security.PropertiesDeEncrypt">  
        <property name="properties">  
        <props>  
          <prop key="user">${jdbc.username}</prop>  
          <prop key="password">${jdbc.passwd}</prop>
        </props>  
        </property>  
    </bean>

    <!--
    log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO    详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc
    如oracle示例:
        原来的sql: select * from user where birth_date = ? and username = ? and age > ?
        转换后sql: select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd') and username = 'badqiu' and age > 20
     -->
    <bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />

    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>log4jdbcInterceptor</value>
            </list>
        </property>
        <property name="beanNames">
           <list>
              <value>dataSource</value>
           </list>
       </property>
    </bean>
	
    <!-- 事务管理, 使用JTA事务管理 for global tx，目前其他第三方数据库只牵扯读取，因此暂不为其他数据源定义事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource"/>
	</bean>


	<!-- enable autowire -->
	<context:annotation-config />
	   
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
			
	<bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource"/>
	  <property name="typeAliasesPackage" value="com.lec.**.vo" />
        <property name="plugins">
            <array>
                <ref local="pageInterceptor"/>
            </array>
        </property>
	  <property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>

	<bean id="sqlSessionTemplate1" class="org.mybatis.spring.SqlSessionTemplate"> 
	    <constructor-arg index="0" ref="sqlSessionFactory1"/> 
	</bean> 
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.lec.**.dao" />
	    <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate1" />
	</bean>  

	<bean id="pageInterceptor" class="com.github.pagehelper.PageHelper"></bean>

	<bean id="applicationContextHolder" class="com.lec.framework.base.ApplicationContextHolder"/>
	
	<bean id="logAspect" class="com.lec.common.log.service.LogAspectResolver"/>
	
</beans>